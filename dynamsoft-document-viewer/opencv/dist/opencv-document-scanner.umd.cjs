(function(h,u){typeof exports=="object"&&typeof module<"u"?u(exports):typeof define=="function"&&define.amd?define(["exports"],u):(h=typeof globalThis<"u"?globalThis:h||self,u(h["opencv-document-scanner"]={}))})(this,function(h){"use strict";var O=Object.defineProperty;var g=(h,u,D)=>u in h?O(h,u,{enumerable:!0,configurable:!0,writable:!0,value:D}):h[u]=D;var p=(h,u,D)=>(g(h,typeof u!="symbol"?u+"":u,D),D);class u{constructor(){p(this,"cv");if("cv"in window)this.cv=window.cv;else throw new Error("OpenCV not found")}detect(f){let t=this.cv;const r=t.imread(f),c=new t.Mat;t.cvtColor(r,c,t.COLOR_RGBA2GRAY);const e=new t.Mat;t.GaussianBlur(c,e,new t.Size(5,5),0,0,t.BORDER_DEFAULT);const d=new t.Mat;t.threshold(e,d,0,255,t.THRESH_BINARY+t.THRESH_OTSU);let a=new t.MatVector,m=new t.Mat;t.findContours(d,a,m,t.RETR_CCOMP,t.CHAIN_APPROX_SIMPLE);let w=0,s=-1;for(let y=0;y<a.size();++y){let o=t.contourArea(a.get(y));o>w&&(w=o,s=y)}const l=a.get(s),i=this.getCornerPoints(l);return r.delete(),c.delete(),e.delete(),d.delete(),a.delete(),m.delete(),i}crop(f,t,r,c){const e=this.cv,d=document.createElement("canvas"),a=e.imread(f);t||(t=this.detect(f));let m=new e.Mat;r||(r=Math.max(this.distance(t[0],t[1]),this.distance(t[2],t[3]))),c||(c=Math.max(this.distance(t[0],t[3]),this.distance(t[1],t[2])));let w=new e.Size(r,c),s=e.matFromArray(4,1,e.CV_32FC2,[t[0].x,t[0].y,t[1].x,t[1].y,t[3].x,t[3].y,t[2].x,t[2].y]),l=e.matFromArray(4,1,e.CV_32FC2,[0,0,r,0,0,c,r,c]),i=e.getPerspectiveTransform(s,l);return e.warpPerspective(a,m,i,w,e.INTER_LINEAR,e.BORDER_CONSTANT,new e.Scalar),e.imshow(d,m),a.delete(),m.delete(),d}distance(f,t){return Math.hypot(f.x-t.x,f.y-t.y)}getCornerPoints(f){let t=this.cv,r=[];const e=t.minAreaRect(f).center;let d,a=0,m,w=0,s,l=0,i,y=0;for(let o=0;o<f.data32S.length;o+=2){const n={x:f.data32S[o],y:f.data32S[o+1]},x=this.distance(n,e);n.x<e.x&&n.y<e.y?x>a&&(d=n,a=x):n.x>e.x&&n.y<e.y?x>w&&(m=n,w=x):n.x<e.x&&n.y>e.y?x>l&&(s=n,l=x):n.x>e.x&&n.y>e.y&&x>y&&(i=n,y=x)}return r.push(d),r.push(m),r.push(i),r.push(s),r}}const D=window.Dynamsoft,v=document.createElement("canvas");class P extends D.DDV.DocumentDetect{constructor(t){super();p(this,"documentScanner");this.documentScanner=t}async detect(t,r){const c=[];try{let s=t.width,l=t.height,i=1,y;const o=720;l>o?(i=l/o,l=o,s=Math.floor(s/i),y=this.compress(t.data,t.width,t.height,s,l)):y=t.data.slice(0),v.width=s,v.height=l;const n=v.getContext("2d");if(n){const x=n.createImageData(s,l);var e=x.data,d=y,a=new Uint8Array(d);e.set(a),n.putImageData(x,0,0),this.documentScanner.detect(v).forEach(C=>{c.push([C.x*i,C.y*i])})}}catch(s){console.log(s),c.push([0,0]),c.push([0,0]),c.push([0,0]),c.push([0,0])}const m={location:c,width:t.width,height:t.height,config:r},w=this.processDetectResult(m);return Promise.resolve(w)}compress(t,r,c,e,d){let a=null;try{a=new Uint8ClampedArray(t)}catch{a=new Uint8Array(t)}const m=e/r,w=d/c,s=e*d*4,l=new ArrayBuffer(s);let i=null;try{i=new Uint8ClampedArray(l,0,s)}catch{i=new Uint8Array(l,0,s)}const y=(o,n)=>{const x=Math.min(r-1,o/m),A=Math.min(c-1,n/w),C=Math.floor(x),E=Math.floor(A);let M=n*e+o,S=E*r+C;M*=4,S*=4;for(let R=0;R<=3;R+=1)i[M+R]=a[S+R]};for(let o=0;o<e;o+=1)for(let n=0;n<d;n+=1)y(o,n);return i}}h.DocumentScanner=u,h.OpenCVDocumentDetectHandler=P,Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});
